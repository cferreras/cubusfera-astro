---
import Layout from '../../layouts/main.astro';
import Navbar from '../../components/Navbar';
import PlayerStats from '../../components/PlayerStats.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';

// Función requerida para rutas dinámicas en Astro
export async function getStaticPaths() {
  // En modo servidor con prerender, solo generar rutas si estamos en desarrollo
  // o si la API está disponible
  const WHITELIST_API_URL = (import.meta.env as ImportMetaEnv & {
    WHITELIST_API_URL?: string
  }).WHITELIST_API_URL || 'http://localhost:8080/whitelist';

  // En producción, permitir que las rutas se generen dinámicamente
  if (import.meta.env.PROD) {
    return [];
  }

  try {
    const response = await fetch(WHITELIST_API_URL);
    if (response.ok) {
      const members = await response.json();
      return members.map((member: {name: string, online: boolean, group: string}) => ({
        params: { member: member.name }
      }));
    }
  } catch (e) {
    console.error('Error fetching members for static paths:', e);
  }
  
  // Fallback: retornar array vacío si no se pueden obtener los miembros
  return [];
}

// Obtener el parámetro del miembro desde la URL
const { member } = Astro.params;

// Validar que el parámetro existe
if (!member) {
  return Astro.redirect('/miembros');
}

// Obtener estado online y grupo del jugador
const WHITELIST_API_URL = (import.meta.env as ImportMetaEnv & {
  WHITELIST_API_URL?: string
}).WHITELIST_API_URL || 'http://localhost:8080/whitelist';

let isOnline = false;
let playerGroup = 'default';
try {
  const whitelistResponse = await fetch(WHITELIST_API_URL);
  if (whitelistResponse.ok) {
    const members = await whitelistResponse.json();
    const memberData = members.find((m: {name: string, online: boolean, group: string}) => m.name === member);
    isOnline = memberData?.online || false;
    playerGroup = memberData?.group || 'default';
  }
} catch (e) {
  console.error('Error fetching online status:', e);
}

// Función para obtener el color del grupo
function getGroupColor(group: string): string {
  switch (group.toLowerCase()) {
    case 'owner':
      return 'bg-gradient-to-r from-red-500 to-red-700 text-white border-red-800 dark:from-red-400 dark:to-red-600 dark:border-red-500';
    case 'admin':
      return 'bg-red-500 text-white border-red-600 dark:bg-red-400 dark:border-red-500';
    case 'moderator':
    case 'mod':
      return 'bg-blue-500 text-white border-blue-600 dark:bg-blue-400 dark:border-blue-500';
    case 'vip':
      return 'bg-yellow-500 text-black border-yellow-600 dark:bg-yellow-400 dark:text-gray-900 dark:border-yellow-500';
    case 'premium':
      return 'bg-purple-500 text-white border-purple-600 dark:bg-purple-400 dark:border-purple-500';
    case 'default':
    default:
      return 'bg-gray-500 text-white border-gray-600 dark:bg-gray-400 dark:text-gray-900 dark:border-gray-500';
  }
}

// Configuración del contenido para el layout
const content = {
  title: `Cubusfera - ${member}`,
  description: `Estadísticas del jugador ${member} en el servidor Cubusfera de Minecraft.`
};
---

<Layout content={content}>
  <Navbar client:load />
  <main class="min-h-screen bg-background">
    <Breadcrumb items={[
      { label: 'Inicio', href: '/' },
      { label: 'Jugadores', nonClickable: true },
      { label: 'Miembros', href: '/miembros' },
      { label: member }
    ]} />

    <div class="container px-4 py-8 mx-auto">
      <!-- Header del jugador -->
      <div class="mb-12 space-y-6 text-center">
        <div class="flex flex-col items-center space-y-4">
          <div class="relative">
            <img 
              src={`https://mc-heads.net/avatar/${member}/128`}
              alt={`Avatar de ${member}`}
              class="w-24 h-24 rounded-lg shadow-lg"
            />
            <!-- Indicador de estado online -->
            <div class={`absolute -top-2 -right-2 w-8 h-8 rounded-full border-4 border-white dark:border-gray-800 flex items-center justify-center ${
              isOnline 
                ? 'bg-green-500 dark:bg-green-400' 
                : 'bg-gray-400 dark:bg-gray-500'
            }`}>
              {isOnline ? (
                <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              ) : (
                <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
              )}
            </div>
          </div>
          <div class="space-y-3">
            <h1 class="text-3xl font-bold md:text-4xl text-foreground">
              Estadísticas de <span class="text-primary">{member}</span>
            </h1>
            
            <!-- Badge del grupo -->
            <div class="flex justify-center">
              <span class={`capitalize px-3 py-1 text-sm font-medium rounded-full border-2 ${getGroupColor(playerGroup)}`}>
                {playerGroup}
              </span>
            </div>
            
            <div class="flex items-center justify-center space-x-2">
              <div class={`w-3 h-3 rounded-full ${
                isOnline ? 'bg-green-500 dark:bg-green-400' : 'bg-gray-400 dark:bg-gray-500'
              }`}></div>
              <span class={`text-sm font-medium ${
                isOnline 
                  ? 'text-green-600 dark:text-green-400' 
                  : 'text-gray-500 dark:text-gray-400'
              }`}>
                {isOnline ? 'Jugando' : 'Desconectado'}
              </span>
            </div>
          </div>
        </div>
        
        <div class="pt-4">
          <a 
            href="/miembros" 
            class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-lg transition-colors duration-200 bg-muted text-muted-foreground hover:bg-muted/80"
          >
            ← Volver a Miembros
          </a>
        </div>
      </div>

      <!-- Server Islands aquí -->
      <PlayerStats server:defer member={member}>
        <div slot="fallback" class="mx-auto max-w-2xl">
          <div class="p-8 text-center rounded-lg bg-muted/30">
            <div class="flex justify-center items-center mx-auto mb-4 w-16 h-16 rounded-full animate-pulse bg-primary/20">
              <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </div>
            <h2 class="mb-2 text-xl font-semibold">Cargando estadísticas de {member}...</h2>
            <p class="text-muted-foreground">Obteniendo datos del servidor de forma asíncrona</p>
          </div>
        </div>
      </PlayerStats>
    </div>
  </main>
  
  <script>
    // Script para mejorar la experiencia de los desplegables
    document.addEventListener('DOMContentLoaded', function() {
      const details = document.querySelectorAll('details');
      details.forEach(detail => {
        detail.addEventListener('toggle', function() {
          if (this.open) {
            // Scroll suave al contenido cuando se abre
            setTimeout(() => {
              this.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }, 100);
          }
        });
      });
    });
  </script>
</Layout>